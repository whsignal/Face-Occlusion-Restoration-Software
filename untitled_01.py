# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QColorDialog
from PyQt5.QtGui import QPixmap, QPainter, QPen, QColor, QBrush
from PyQt5.QtCore import Qt, QPoint
import random

# from PyQt5 import QtCore, QtGui, QtWidgets

#待完成：画笔粗细选择、随机破损

#不能连续绘制。

# untitled_01
# 实时更新破损比例。--非常卡
# 正方形画笔
# 完成手动、均匀(随机)破损
# ！！！！！注意半径为1的圆形面积为3.14，和矩形不一样

# untitled_02
# 每次绘制完成后更新比例--流畅
# 正方形画笔

# untitled_03
# 每次绘制完成后更新比例--流畅
# 圆形画笔--非常卡非常卡


# 未解决的问题
# 1、图片缩放带来的鼠标与画笔位置偏差的问题。 -------部分OK
# 2、布局略微有点偏小的问题 -------OK
# 3、所有部件没有特殊命名的小问题 -------OK
# 4、实时更新比例会导致运行非常慢 --------暂时OK不了
# 5、恢复原图
# 6、保存/导出

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1399, 775)
        MainWindow.setMinimumSize(QtCore.QSize(5, 10))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(40, 660, 861, 47))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.SelectPicture = QtWidgets.QPushButton(self.layoutWidget)
        self.SelectPicture.setMinimumSize(QtCore.QSize(0, 45))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.SelectPicture.setFont(font)
        self.SelectPicture.setObjectName("SelectPicture")
        self.horizontalLayout_5.addWidget(self.SelectPicture)
        spacerItem = QtWidgets.QSpacerItem(25, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.DoOperate = QtWidgets.QPushButton(self.layoutWidget)
        self.DoOperate.setMinimumSize(QtCore.QSize(0, 45))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.DoOperate.setFont(font)
        self.DoOperate.setObjectName("DoOperate")
        self.horizontalLayout_5.addWidget(self.DoOperate)
        self.SystemName = QtWidgets.QLabel(self.centralwidget)
        self.SystemName.setGeometry(QtCore.QRect(520, 30, 221, 51))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(24)
        self.SystemName.setFont(font)
        self.SystemName.setTextFormat(QtCore.Qt.PlainText)
        self.SystemName.setObjectName("SystemName")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(40, 100, 400, 550))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setMinimumSize(QtCore.QSize(450, 450))                   ##长宽相等。自适应。需要在跑网络之前放大到512*512
        self.label.setMaximumSize(QtCore.QSize(400, 350))
        self.label.setObjectName("label")
        self.picture_after = QtWidgets.QLabel(self.centralwidget)
        self.picture_after.setGeometry(QtCore.QRect(550, 100, 400, 550))
        self.picture_after.setMinimumSize(QtCore.QSize(450, 450))           ##处理后的图像大小设定
        self.picture_after.setMaximumSize(QtCore.QSize(400, 550))
        self.picture_after.setObjectName("picture_after")
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(1000, 100, 372, 90))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.horizontalSlider_random = QtWidgets.QSlider(self.layoutWidget1)
        self.horizontalSlider_random.setMinimumSize(QtCore.QSize(250, 35))
        self.horizontalSlider_random.setMaximumSize(QtCore.QSize(200, 16777215))
        self.horizontalSlider_random.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_random.setObjectName("horizontalSlider_random")
        self.horizontalLayout_6.addWidget(self.horizontalSlider_random)
        self.random_percent = QtWidgets.QTextEdit(self.layoutWidget1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.random_percent.sizePolicy().hasHeightForWidth())
        self.random_percent.setSizePolicy(sizePolicy)
        self.random_percent.setMinimumSize(QtCore.QSize(100, 5))
        self.random_percent.setMaximumSize(QtCore.QSize(100, 20))
        self.random_percent.setObjectName("random_percent")
        self.horizontalLayout_6.addWidget(self.random_percent)
        self.label_11 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_11.setMaximumSize(QtCore.QSize(15, 16777215))
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_6.addWidget(self.label_11)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        self.pushButton_random = QtWidgets.QPushButton(self.layoutWidget1)
        self.pushButton_random.setMinimumSize(QtCore.QSize(300, 45))
        self.pushButton_random.setMaximumSize(QtCore.QSize(350, 16777215))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.pushButton_random.setFont(font)
        self.pushButton_random.setObjectName("pushButton_random")
        self.verticalLayout_3.addWidget(self.pushButton_random)
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(1000, 210, 372, 90))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.horizontalSlider_draw = QtWidgets.QSlider(self.layoutWidget2)
        self.horizontalSlider_draw.setMinimumSize(QtCore.QSize(250, 35))
        self.horizontalSlider_draw.setMaximumSize(QtCore.QSize(250, 16777215))
        self.horizontalSlider_draw.setOrientation(QtCore.Qt.Horizontal)
        self.horizontalSlider_draw.setObjectName("horizontalSlider_draw")
        self.horizontalLayout_4.addWidget(self.horizontalSlider_draw)
        self.draw_percent = QtWidgets.QTextEdit(self.layoutWidget2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.draw_percent.sizePolicy().hasHeightForWidth())
        self.draw_percent.setSizePolicy(sizePolicy)
        self.draw_percent.setMinimumSize(QtCore.QSize(100, 5))
        self.draw_percent.setMaximumSize(QtCore.QSize(100, 20))
        self.draw_percent.setObjectName("draw_percent")
        self.horizontalLayout_4.addWidget(self.draw_percent)
        self.label_8 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_8.setMaximumSize(QtCore.QSize(15, 16777215))
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_4.addWidget(self.label_8)
        self.verticalLayout_2.addLayout(self.horizontalLayout_4)
        self.pushButton_draw = QtWidgets.QPushButton(self.layoutWidget2)
        self.pushButton_draw.setMinimumSize(QtCore.QSize(350, 45))
        self.pushButton_draw.setMaximumSize(QtCore.QSize(320, 16777215))
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(16)
        self.pushButton_draw.setFont(font)
        self.pushButton_draw.setObjectName("pushButton_draw")
        self.verticalLayout_2.addWidget(self.pushButton_draw)
        self.layoutWidget3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget3.setGeometry(QtCore.QRect(1000, 330, 361, 261))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.gridLayout = QtWidgets.QGridLayout(self.layoutWidget3)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.label_10 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_10.setObjectName("label_10")
        self.gridLayout.addWidget(self.label_10, 4, 0, 1, 1)
        self.label_5 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 1, 0, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget3)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 3, 0, 1, 1)
        self.ExportImage = QtWidgets.QPushButton(self.centralwidget)
        self.ExportImage.setGeometry(QtCore.QRect(1000, 620, 181, 41))
        self.ExportImage.setObjectName("ExportImage")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1399, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.SelectPicture.setText(_translate("MainWindow", "Select"))
        self.DoOperate.setText(_translate("MainWindow", "Tackle"))
        self.SystemName.setText(_translate("MainWindow", "XXXXX系统"))
        self.label.setText(_translate("MainWindow", "image_After"))
        self.picture_after.setText(_translate("MainWindow", "image_After"))
        self.label_11.setText(_translate("MainWindow", "%"))
        self.pushButton_random.setText(_translate("MainWindow", "随机破损 --->"))
        self.label_8.setText(_translate("MainWindow", "%"))
        self.pushButton_draw.setText(_translate("MainWindow", "手动破损 --->"))
        self.label_10.setText(_translate("MainWindow", " "))
        self.label_5.setText(_translate("MainWindow", "其他功能"))
        self.label_6.setText(_translate("MainWindow", " "))
        self.ExportImage.setText(_translate("MainWindow", "导出"))



class MainWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        # 绑定按钮点击事件
        self.ui.SelectPicture.clicked.connect(self.import_image)  # 导入图片
        self.ui.pushButton_draw.clicked.connect(self.start_drawing)  # 开始涂鸦
        self.ui.pushButton_random.clicked.connect(self.random_damage)  # 随机破损
        self.ui.horizontalSlider_random.valueChanged.connect(self.update_random_percent)   # 绑定滑块值变化事件
        self.ui.ExportImage.clicked.connect(self.export_image)  # 导出

        # 初始化变量
        self.pixmap = None  # 用于存储原始图片
        self.drawing = False  # 标记是否处于涂鸦模式
        self.last_point = QPoint()  # 记录上一个鼠标位置
        self.drawing_pixmap = None  # 用于记录涂鸦的 QPixmap

        # QLabel 的固定大小
        self.ui.label.setScaledContents(True)  # 确保图片自动缩放以适应 QLabel

    def import_image(self):
        """导入图片并显示在 QLabel 中"""
        file_path, _ = QFileDialog.getOpenFileName(self, "选择图片", "", "Image Files (*.png *.jpg *.bmp *.gif)")
        if file_path:
            self.pixmap = QPixmap(file_path)

            # 确保图片自动适应 QLabel 的大小
            self.pixmap = self.pixmap.scaled(self.ui.label.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation)

            self.drawing_pixmap = QPixmap(self.pixmap.size())  # 创建一个与图片大小相同的 QPixmap 用于记录涂鸦
            self.drawing_pixmap.fill(Qt.transparent)  # 初始化为透明
            self.ui.label.setPixmap(self.pixmap)  # 显示图片

    def start_drawing(self):
        """激活涂鸦模式"""
        self.drawing = True
        self.ui.label.setCursor(Qt.CrossCursor)  # 设置鼠标为十字光标

    def map_to_pixmap(self, label_pos):
        """将 QLabel 的坐标转换为 QPixmap 的坐标"""
        if self.pixmap:
            label_rect = self.ui.label.rect()  # 获取 QLabel 的矩形区域
            pixmap_rect = self.pixmap.rect()  # 获取 QPixmap 的矩形区域

            # 计算缩放比例
            scale_factor_x = pixmap_rect.width() / label_rect.width()
            scale_factor_y = pixmap_rect.height() / label_rect.height()

            # 转换坐标
            x = label_pos.x() * scale_factor_x
            y = label_pos.y() * scale_factor_y

            return QPoint(int(x), int(y))  # 返回转换后的坐标
        return QPoint()

    def random_damage(self):
        """根据滑块的比例对图片进行随机破损"""
        if self.pixmap:
            damage_ratio = self.ui.horizontalSlider_random.value() / 100.0  # 获取滑块的比例值
            damage_count = int(damage_ratio * self.pixmap.width() * self.pixmap.height() / 3.14)   #因为是圆形破损，除完3.14才是正确的破损比例

            painter = QPainter(self.drawing_pixmap)
            painter.setRenderHint(QPainter.Antialiasing, True)  # 启用抗锯齿
            painter.setPen(QPen(Qt.white, 1, Qt.SolidLine))  # 设置画笔颜色和宽度
            painter.setBrush(QBrush(Qt.white, Qt.SolidPattern))  # 使用复用的 QBrush

            for _ in range(damage_count):
                x = random.randint(0, self.pixmap.width() - 1)
                y = random.randint(0, self.pixmap.height() - 1)
                painter.drawEllipse(QPoint(x, y), 1, 1)  # 绘制小圆形模拟破损

            painter.end()

            # 更新显示的图片
            combined_pixmap = QPixmap(self.pixmap.size())  # 创建一个与原始图片大小相同的 QPixmap
            combined_pixmap.fill(Qt.transparent)  # 初始化为透明
            painter = QPainter(combined_pixmap)
            painter.drawPixmap(0, 0, self.pixmap)  # 绘制原始图片
            painter.drawPixmap(0, 0, self.drawing_pixmap)  # 绘制破损效果
            painter.end()
            self.ui.label.setPixmap(combined_pixmap)  # 更新 QLabel 的图片

    def update_random_percent(self, value):
        """更新随机破损比例的显示"""
        self.ui.random_percent.setPlainText(f"{value}")  # 将滑块的值显示在 QTextEdit 中

    def mousePressEvent(self, event):
        """鼠标按下事件"""
        if self.drawing and event.button() == Qt.LeftButton:
            # 获取鼠标相对于 QLabel 的位置
            pos = self.ui.label.mapFromParent(event.pos())
            # 将 QLabel 的坐标转换为 QPixmap 的坐标
            self.last_point = self.map_to_pixmap(pos)

    def mouseMoveEvent(self, event):
        """鼠标移动事件"""
        if self.drawing:
            # 获取鼠标相对于 QLabel 的位置
            pos = self.ui.label.mapFromParent(event.pos())
            # 将 QLabel 的坐标转换为 QPixmap 的坐标
            current_point = self.map_to_pixmap(pos)

            # 创建 QPainter 对象用于在 drawing_pixmap 上绘制
            painter = QPainter(self.drawing_pixmap)
            painter.setPen(QPen(Qt.white, 20, Qt.SolidLine))  # 设置画笔颜色、大小和样式
            painter.drawLine(self.last_point, current_point)  # 绘制线条
            painter.end()

            # 更新显示的图片
            combined_pixmap = QPixmap(self.pixmap.size())  # 创建一个与原始图片大小相同的 QPixmap
            combined_pixmap.fill(Qt.transparent)  # 初始化为透明
            painter = QPainter(combined_pixmap)
            painter.drawPixmap(0, 0, self.pixmap)  # 绘制原始图片
            painter.drawPixmap(0, 0, self.drawing_pixmap)  # 绘制涂鸦
            painter.end()
            self.ui.label.setPixmap(combined_pixmap)  # 更新 QLabel 的图片

            # 更新破损比例
            self.update_drawing_ratio()

            self.last_point = current_point  # 更新上一个鼠标位置

    def mouseReleaseEvent(self, event):
        """鼠标释放事件"""
        if self.drawing and event.button() == Qt.LeftButton:
            self.drawing = False
            self.ui.label.setCursor(Qt.ArrowCursor)  # 恢复默认光标

    def update_drawing_ratio(self):
        """实时更新涂鸦占图片的比例"""
        if self.drawing_pixmap:
            drawing_image = self.drawing_pixmap.toImage()  # 将 QPixmap 转换为 QImage
            total_pixels = drawing_image.width() * drawing_image.height()  # 图片的总像素数
            white_pixels = 0  # 记录白色像素的数量

            # 遍历图片的每个像素
            for x in range(drawing_image.width()):
                for y in range(drawing_image.height()):
                    if drawing_image.pixelColor(x, y) == QColor(255, 255, 255, 255):
                        white_pixels += 1

            # 计算涂鸦比例
            ratio = (white_pixels / total_pixels) * 100
            self.ui.horizontalSlider_draw.setValue(int(ratio))  # 更新滑块的值
            self.ui.draw_percent.setText(f"{ratio:.2f}%")  # 更新文本框的值


    def closeEvent(self, event):
        """关闭窗口时停止涂鸦"""
        self.drawing = False

    def export_image(self):
        """将绘制后的图像导出为文件"""
        if self.pixmap and self.drawing_pixmap:
            # 创建一个与原始图片大小相同的 QPixmap 用于保存最终图像
            final_pixmap = QPixmap(self.pixmap.size())
            final_pixmap.fill(Qt.transparent)

            # 合并原始图片和涂鸦图层
            painter = QPainter(final_pixmap)
            painter.drawPixmap(0, 0, self.pixmap)  # 绘制原始图片
            painter.drawPixmap(0, 0, self.drawing_pixmap)  # 绘制涂鸦
            painter.end()

            # 保存图像到文件
            file_path, _ = QFileDialog.getSaveFileName(self, "保存图片", "", "Image Files (*.png *.jpg *.bmp)")
            if file_path:
                final_pixmap.save(file_path)
                print(f"图像已保存到: {file_path}")


    def on_do_operate_clicked(self):
        # 获取 self.ui.label 中的图片并转换为 QImage
        pixmap = self.ui_label.pixmap()
        image = pixmap.toImage()

        # 将 QImage 转换为 numpy 数组
        width = image.width()
        height = image.height()
        buffer = image.bits().asarray(width * height * 4)
        buffer = np.array(buffer).reshape(height, width, 4)
        buffer = cv2.cvtColor(buffer, cv2.COLOR_RGBA2BGR)

        # 保存图片到临时文件
        temp_image_path = "temp_image.jpg"
        cv2.imwrite(temp_image_path, buffer)

        # 调用 run_inference 函数处理图片
        run_inference(input_path=temp_image_path, output_path=None, suffix=None)

        # 假设处理后的图片保存在 outputs/processed_image.jpg
        processed_image_path = "outputs/processed_image.jpg"

        # 将处理后的图片显示在 self.ui.label 中
        processed_pixmap = QPixmap(processed_image_path)
        self.ui_label.setPixmap(processed_pixmap)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())